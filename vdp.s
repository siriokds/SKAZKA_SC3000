.module vdp

vdp_data		= 0xBE
vdp_control 	= 0xBF
tilemap_address = 0x0800

; ASCII
BS = 0x08
FF = 0x0C
CR = 0x0D
LF = 0x0A
SP = 0x20

SCRW = 40
SCRH = 24


	.area _CODE
	.globl	vdp_reg0, vdp_reg1, cursor_x, cursor_y, _console_cursor, _write_char_value, scrolling_buffer, write_hex16, write_hex8


; Initialise VDP with screen off
; Reg Data
; 0   %00000000 = disable ints, TMS mode
; 1   %10010000 = display blanked, mode 1
;------------------------
_vdp_reset::
    call   	read_vdp_status                       ; why do it twice? or at all?
    call   	read_vdp_status

	push	af
	
    ld     	a,#0b00000000
	ld		(vdp_reg0),a
    out    	(vdp_control),a
    ld     	a,#0x80
    out    	(vdp_control),a
	
    ld     	a,#0b10010000
	ld		(vdp_reg1),a
    out    	(vdp_control),a
    ld     	a,#0x81
    out    	(vdp_control),a
	
	pop		af

    call   	read_vdp_status                       ; why do it twice? or at all?
    call   	read_vdp_status
	ret


;------------------------
;_vdp_interrupt_enable::
;	ld		a, (vdp_reg1)
;	ret


; returns: nothing
; parameters: none
; clobbers: a, b, de, hl
;------------------------
_vdp_setup_registers::
	    ld     b,#0x02
vdp_2x:
			push   bc
			call   read_vdp_status                     ; not sure why?
			ld     c,#0x00
			ld     a,#0b00000000                       ; reg 0: no line ints, turn off features
			ld	   (vdp_reg0),a
			call   set_vdp_register
			
			inc    c
			ld     a,#0b11010000                         ; reg 1: display enable, mode 1
			ld	   (vdp_reg1),a
			call   set_vdp_register
			
			
			inc    c
			ld     a,#tilemap_address/1024             ; reg 2: tilemap address
			call   set_vdp_register
			inc    c
			ld     a,#0x00                               ; reg 3: colour table address
			call   set_vdp_register
			inc    c
			ld     a,#0x03                               ; reg 4: pattern generator address
			call   set_vdp_register
			inc    c
			ld     a,#0x00                               ; reg 5: sprite table address
			call   set_vdp_register
			inc    c
			ld     a,#0x00                               ; reg 6: sprite tile number modifier (?)
			call   set_vdp_register
			inc    c
			ld     a,#0xF4                               ; reg 7: backdrop color (1)
			;ld     a,#0xE0                               ; reg 7: backdrop color (1)
			call   set_vdp_register
			
			ld     hl,#0x1800
			call   set_vram_write_address_to_hl

			xor    a
			ld     b,a
vl_1:    
			call   wait_and_output_a_to_vdp
			djnz   vl_1                                  		; output 256 zero bytes at VRAM 0x1800

			ld     de,#font_data                        ; output the font after that
			ld     bc,#font_data_end-font_data
vl_2:
			ld     a,(de)
			call   wait_and_output_a_to_vdp
			inc    de
			dec    bc
			ld     a,b
			or     c
			jr     nz,vl_2

			ld     hl,#0x0800
			ld     bc,#960
			call   set_vram_write_address_to_hl
vl_3:    
			ld     a,#0x20                               ; set 960 bytes from VRAM 0x0800 to 0x20
			call   wait_and_output_a_to_vdp
			dec    bc
			ld     a,b
			or     c
			jr     nz,vl_3
 
			pop    	bc
			djnz   	vdp_2x                                  ; do the whole thing twice - why?!?
		
	    ld     	a,#2                                   ; set cursor to (2, 0)
	    ld     	(#cursor_x),a
	    ld     	a,#0
	    ld     	(#cursor_y),a
		
		
		ld     	c,#0x01
		ld	   	a, (vdp_reg1)
		or		a, #0x20			; VDP_VDPFEATURE_FRAMEIRQ
		or		a, #0x40			; VDP_VDPFEATURE_SHOWDISPLAY
		call   	set_vdp_register
		

		call	read_vdp_status
		call	read_vdp_status
		ei

		ret





read_vdp_status:
		in     a,(vdp_control)
		ret







set_vdp_register::
; a = data
; c = register
; clobbers a
    out    (vdp_control),a
    ld     a,c
    and    #0x07
    or     #0x80
    out    (vdp_control),a
    ret

set_vram_read_address_to_hl::
		push   af
		ld     a,l
		out    (vdp_control),a
		ld     a,h
		and    #0x3F
		out    (vdp_control),a
		pop    af
		ret

wait_and_read_from_vdp::
		nop
		nop
		nop
		nop
		nop
		in     a,(vdp_data)
		ret

set_vram_write_address_to_hl::
		push   af
		ld     a,l
		out    (vdp_control),a
		ld     a,h
		and    #0x3f
		or     #0x40                                 ; make it a write address
		out    (vdp_control),a
		pop    af
		ret

wait_and_output_a_to_vdp::
		nop
		nop
		nop
		nop
		out    (vdp_data),a
		ret



;Display a 16- or 8-bit number in hex.
;#######################################
write_hex16::
;#######################################
; Input: HL = 16 bit number
;---------------------------------------
	push	bc
	
	ld  	c,h
	call  	write_hex8
	ld  	c,l
	call  	write_hex8
	
	pop		bc
	ret
	
  
  
 ;#######################################
_console_write_hex8::
;#######################################
	push	ix
	
	ld		ix, #0
	add		ix, sp
	ld		c, 4(ix)

	call	write_hex8

	pop		ix
	ret


PrintSpace:
	push 	af
	ld		a, #32
	call 	console_writechar
	pop		af
	ret


;Draw a 3 digit decimal number (non-BCD)
;#######################################
_console_write_int8::
;#######################################	
	push	ix
	ld		ix, #0
	add		ix, sp
	
	ld		a, 4(ix)		; parm 1

	push	bc
	push	hl

	call	DrawText_Decimal

	pop		hl
	pop		bc

	pop		ix
	ret
	
	
;==============================================
DrawText_Decimal:
	ld 		b, a		
	ld 		hl, #0x640A
	
	cp 		h
	jr 		nc, DecThreeDigit

	call 	PrintSpace
	
	cp 		l 
	jr 		nc, SkipDigit100
	;call 	PrintSpace

	jr 		SkipDigit10
	
DecThreeDigit:
	call 	DrawTextDecimalSub

SkipDigit100:
	ld 		h, l
	call 	DrawTextDecimalSub

SkipDigit10:
	ld 		a, b
DrawText_CharSprite48:
	add 	#0x30

DrawText_CharSpriteProtectBC:
;	call	console_writechar				; draw char
;	jr		DrawText_exit

	jp 		console_writechar				; draw char
	
DrawTextDecimalSub:
	ld 		a, b
	ld 		c, #0
DrawText_DecimalSubagain:
	cp 		h
	jr 		c,DrawText_DecimalLessThan		; Divide by 100
	inc 	c
	sub 	h
	jr DrawText_DecimalSubagain

DrawText_DecimalLessThan:
	ld 		b, a
	ld 		a, c
	or 		a								;We''re going to do a compare as soon as we return
	jr 		DrawText_CharSprite48




;Number in hl to decimal ASCII
;Thanks to z80 Bits
;inputs:	hl = number to ASCII
;example: hl=300 outputs '00300'
;destroys: af, bc, hl, de used

;#######################################
_console_write_int16::
;#######################################
	push	ix
	ld		ix, #0
	add		ix, sp

	push 	bc
	
	ld		a, 4(ix)		; parm 1
	ld		h, a
	ld		a, 5(ix)		; parm 2
	ld		l, a
	
	;ld		a, #0x20
	;call 	console_writechar
	
	ld		bc,#-10000
	call	Num1
	ld		bc,#-1000
	call	Num1
	ld		bc,#-100
	call	Num1
	ld		c,#-10
	call	Num1
	ld		c,#-1
Num1:	
	ld		a,#'0'-1
Num2:	
	inc		a
	add		hl,bc
	jr		c,Num2
	sbc		hl,bc
	call 	console_writechar
	
	pop		bc
	pop		af
	
	pop		ix
	ret 

   
;#######################################
write_hex8::
;#######################################
; Input: C = 8 bit number
;---------------------------------------

	ld		a, c
	srl 	a
	srl 	a	
	srl 	a	
	srl 	a	

	call	nib
	
	ld		a, c
	and  	a, #0x0F

nib:	
    add  	a, #0x90
    daa
    adc  	a, #0x40
    daa
	call	console_writechar

	ret   
   
   
vdp_msg_cls:
	.db 0x0C, 0

_console_cls::
	push	hl
	ld		hl, #vdp_msg_cls
	call	write_text
	pop		hl
	ret


;#######################################
_console_cursor::
;#######################################
	push	ix
	ld		ix, #0
	add		ix, sp

;	pop		hl
	
	
	ld		a, 4(ix)		; parm 1
	ld		(#cursor_x), a
	ld		a, 5(ix)		; parm 2
	ld		(#cursor_y), a

	pop		ix
	ret





;#######################################
; Write text
;#######################################
; writes text from (hl) until a zero byte is found
; parameters: hl = text pointer
; returns: nothing
; clobbers: nothing
;------------------------
write_text::
		push   af
		push   hl

wt_1:
		ld     a,(hl)
		cp     #0x00
		jr     z,wt_2
		call   console_writechar
		inc    hl
		jr     wt_1
wt_2:
		pop    hl
		pop    af

		ret


;#######################################
_console_writetext::
;#######################################
	push	ix
	ld		ix, #0
	add		ix, sp

;	pop		hl
	
	ld		l, 4(ix)
	ld		h, 5(ix)

	call	write_text
	
	pop		ix
	ret



;#######################################
_console_writechar::
;#######################################
	push	ix
	
	ld		ix, #0
	add		ix, sp
	ld		a, 4(ix)
	call	console_writechar

	pop		ix
	ret

	


;#######################################
; Write char
;#######################################
; writes char in a
;------------------------
console_writechar::
    push   af
    push   bc
    push   de
    push   hl
    push   ix


      ld     (#_write_char_value),a
      cp     #CR                                ; handle control codes
      jp     z, write_newline
      cp     #LF                                ; handle control codes
      jp     z, write_newline
      cp     #FF
      jp     z, write_formfeed
      cp     #BS
      jp     z, write_backspace
      cp     #SP                                 ; make sure char is in ASCII range (32<=n<128)
      jp     c,write_char_exit
      
	  ;cp     #0x80
      ;jp     nc,write_char_exit                  ; do nothing for rest

      ; calculate cursor position in tilemap = tilemap_address + cursor_y * 40 + cursor_x
      ld     a,(#cursor_y)                        ; calculate (#cursor_y)*40
      ld     hl, #0
      ld     de, #SCRW
      ld     b,a
      inc    b
wc_1a:
	    dec    b
      jr     z, wc_1b
      add    hl,de
      jr     wc_1a

wc_1b:
	  ld     a,(#cursor_x)                        ; add (#cursor_x)
      ld     d, #0x00
      ld     e,a
      add    hl,de

      ld     de, #tilemap_address                  ; add tilemap_address
      add    hl,de

      call   set_vram_write_address_to_hl
      ld     a, (#_write_char_value)                ; write value
      call   wait_and_output_a_to_vdp

      ; increment cursor_x, deal with wrapping
      ld     a,(#cursor_x)                        ; increment cursor_x
      inc    a
      ld     (#cursor_x),a
      cp     #SCRW                                  ; if < 40, finish, else fall through into newline
      jp     nz,write_char_exit
      ; fall through

write_newline: ; line break - reset cursor to left, scroll if on last line else move cursor down
;      call   at_key_just_pressed                 ; if @ just pressed, pause
;      jr     nc, wc_2b
;      call   long_pause
;wc_2a:
;	    call   at_key_just_pressed                 ; wait for it to be pressed again
;      jr     nc, wc_2a
;      call   long_pause
;wc_2b:

	  ld     a, #2                                 ; wrap cursor to position 2 on next line
      ld     (#cursor_x),a
      ld     a,(#cursor_y)
      inc    a
      ld     (#cursor_y),a
      cp     #24                                  ; if y=24 then the screen needs to scroll
      jp     nz,write_char_exit

write_newline_scroll_screen:
      ld     hl, #tilemap_address                  ; copy to start of tilemap
      ld     de, #tilemap_address + SCRW            ; from second row
      ld     c, #(SCRH-1)                                ; 23 rows to copy

      ; Read 40 bytes from VRAM at de into a buffer
wc_3c:
      ex     de,hl
      call   set_vram_read_address_to_hl

      ld     ix, #scrolling_buffer                 ; RAM buffer (40 bytes)
      ld     b, #SCRW                                ; loop counter
wc_3a:  

;OOOOOOOOOOOOOOOOOOOOOOOOOOO  
	  di
	  call   wait_and_read_from_vdp              ; read bytes into buffer
	  ei
	  
      ld     (ix),a
      inc    ix
      inc    hl
      djnz  wc_3a

      ; Write those 40 bytes back to VRAM at hl
      ex     de,hl
	  
	  
;OOOOOOOOOOOOOOOOOOOOOOOOOOO  
	  di
      call   set_vram_write_address_to_hl
      ei
	  
	  
      ld     ix, #scrolling_buffer
      ld     b, #SCRW
wc_3b:    
	  ld     a,(ix)
      call   wait_and_output_a_to_vdp
      inc    ix
      inc    hl
      djnz   wc_3b
      dec    c
      jr     nz, wc_3c                             ; repeat for 23 rows

      ld     b,#10                                ; loop 10 times (unrolled by 4)
      ld     a,#SP                               ; write a space
wc_4a:

;OOOOOOOOOOOOOOOOOOOOOOOOOOO  
	  di
	  call   wait_and_output_a_to_vdp
      call   wait_and_output_a_to_vdp
      call   wait_and_output_a_to_vdp
      call   wait_and_output_a_to_vdp
      ei

      djnz   wc_4a

      ld     a,#23                                ; put cursor at row 23
      ld     (#cursor_y),a
      jr     write_char_exit

write_formfeed: ; clear screen, reset cursor
      ld     a,#2                                 ; put cursor at (2,0)
      ld     (#cursor_x),a
      ld     a,#0
      ld     (#cursor_y),a

      ld     hl, #tilemap_address


;OOOOOOOOOOOOOOOOOOOOOOOOOOO  
	  di
      call   set_vram_write_address_to_hl
	  ei


      ld     bc,#SCRW*SCRH                            ; fill tilemap with spaces
wc_5a:
	  ld     a,#SP

;OOOOOOOOOOOOOOOOOOOOOOOOOOO  
	  di
      call   wait_and_output_a_to_vdp
	  ei
	  
      dec    bc
      ld     a,b
      or     c
      jr     nz,wc_5a
      jr     write_char_exit

write_backspace:
      ld     a,(#cursor_x)                        ; move cursor left 1
      dec    a
      ld     (#cursor_x),a
      cp     #1                                   ; if x=1 then the cursor needs to go to the end of the previous row
      jr     nz,delete_char_from_tilemap         ; else we''re done
write_backspace_wrap_to_previous_line:
      ld     a,(#cursor_y)                        ; move cursor to end of prevous line
      dec    a
      ld     (#cursor_y),a
      cp     #-1                                  ; check if it's -1
      ld     a,#SCRW-1                                ; cursor x = end of line
      ld     (#cursor_x),a
      jr     nz,delete_char_from_tilemap         ; if it wasn't -1 then we're done
write_backspace_reached_top_left:
      ld     a,#2                                 ; else, just go to the top-left limit (ie. undo decrements, nothing happens)
      ld     (#cursor_x),a
      ld     a,#0
      ld     (#cursor_y),a
      jr     write_char_exit                     ; nothing to delete

delete_char_from_tilemap:
      ; calculate tilemap address of cursor and write a space there
      ; address = cursor_y * 40 + cursor_x + tilemap_address
      ld     a,(#cursor_y)
      ld     hl,#0
      ld     de,#SCRW
      ld     b,a
      inc    b
wc_6a:
	    dec    b
      jr     z, wc_6b
      add    hl,de
      jr     wc_6a
      
wc_6b:    
		  ld     a,(#cursor_x)
      ld     d,#0
      ld     e,a
      add    hl,de
      ld     de, #tilemap_address
      add    hl,de
	  
;OOOOOOOOOOOOOOOOOOOOOOOOOOO  
	  di
      call   set_vram_write_address_to_hl
      ld     a,#SP                               ; write space = blank
      call   wait_and_output_a_to_vdp
      ei



write_char_exit:
    pop    ix
    pop    hl
    pop    de
    pop    bc
    pop    af
        
		ret

.ascii "FONT_STA"
font_data:
;.include "ipl_font.inc" 
	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x20, 0x00
	.db 0x50, 0x50, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x50, 0xF8, 0x50, 0xF8, 0x50, 0x50, 0x00
	.db 0x20, 0x78, 0xA0, 0x70, 0x28, 0xF0, 0x20, 0x00, 0xC8, 0xC8, 0x10, 0x20, 0x40, 0x98, 0x98, 0x00
	.db 0x40, 0xA0, 0xA0, 0x40, 0xA8, 0x90, 0x68, 0x00, 0x20, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00
	.db 0x10, 0x20, 0x40, 0x40, 0x40, 0x20, 0x10, 0x00, 0x40, 0x20, 0x10, 0x10, 0x10, 0x20, 0x40, 0x00
	.db 0x20, 0xA8, 0x70, 0x20, 0x70, 0xA8, 0x20, 0x00, 0x00, 0x20, 0x20, 0xF8, 0x20, 0x20, 0x00, 0x00
	.db 0x00, 0x00, 0x00, 0x00, 0x30, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00
	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00, 0x00
	.db 0x30, 0x48, 0x48, 0x48, 0x48, 0x48, 0x30, 0x00, 0x20, 0x60, 0x20, 0x20, 0x20, 0x20, 0x70, 0x00
	.db 0x70, 0x88, 0x08, 0x10, 0x20, 0x40, 0xF8, 0x00, 0x70, 0x88, 0x08, 0x30, 0x08, 0x88, 0x70, 0x00
	.db 0x30, 0x50, 0x90, 0x90, 0xF8, 0x10, 0x10, 0x00, 0xF8, 0x80, 0xF0, 0x08, 0x08, 0x88, 0x70, 0x00
	.db 0x70, 0x80, 0x80, 0xF0, 0x88, 0x88, 0x70, 0x00, 0xF8, 0x88, 0x08, 0x10, 0x20, 0x20, 0x20, 0x00
	.db 0x70, 0x88, 0x88, 0x70, 0x88, 0x88, 0x70, 0x00, 0x70, 0x88, 0x88, 0x78, 0x08, 0x10, 0x60, 0x00
	.db 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x10, 0x20, 0x00
	.db 0x08, 0x10, 0x20, 0x40, 0x20, 0x10, 0x08, 0x00, 0x00, 0x00, 0x78, 0x00, 0x78, 0x00, 0x00, 0x00
	.db 0x40, 0x20, 0x10, 0x08, 0x10, 0x20, 0x40, 0x00, 0x70, 0x88, 0x88, 0x10, 0x20, 0x00, 0x20, 0x00
	.db 0x70, 0x88, 0x08, 0x48, 0xA8, 0xA8, 0x70, 0x00, 0x20, 0x50, 0x88, 0x88, 0xF8, 0x88, 0x88, 0x00
	.db 0xF0, 0x48, 0x48, 0x70, 0x48, 0x48, 0xF0, 0x00, 0x70, 0x88, 0x80, 0x80, 0x80, 0x88, 0x70, 0x00
	.db 0xF0, 0x48, 0x48, 0x48, 0x48, 0x48, 0xF0, 0x00, 0xF8, 0x80, 0x80, 0xF0, 0x80, 0x80, 0xF8, 0x00
	.db 0xF8, 0x80, 0x80, 0xF0, 0x80, 0x80, 0x80, 0x00, 0x70, 0x88, 0x80, 0xB8, 0x88, 0x88, 0x70, 0x00
	.db 0x88, 0x88, 0x88, 0xF8, 0x88, 0x88, 0x88, 0x00, 0x70, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x00
	.db 0x08, 0x08, 0x08, 0x08, 0x88, 0x88, 0x70, 0x00, 0x88, 0x90, 0xA0, 0xC0, 0xA0, 0x90, 0x88, 0x00
	.db 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xF8, 0x00, 0x88, 0xD8, 0xA8, 0xA8, 0x88, 0x88, 0x88, 0x00
	.db 0x88, 0xC8, 0xA8, 0x98, 0x88, 0x88, 0x88, 0x00, 0xF8, 0x88, 0x88, 0x88, 0x88, 0x88, 0xF8, 0x00
	.db 0xF0, 0x88, 0x88, 0xF0, 0x80, 0x80, 0x80, 0x00, 0x70, 0x88, 0x88, 0x88, 0xA8, 0x90, 0x68, 0x00
	.db 0xF0, 0x88, 0x88, 0xF0, 0xA0, 0x90, 0x88, 0x00, 0x70, 0x88, 0x80, 0x70, 0x08, 0x88, 0x70, 0x00
	.db 0xF8, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00
	.db 0x88, 0x88, 0x88, 0x88, 0x88, 0x50, 0x20, 0x00, 0x88, 0x88, 0x88, 0x88, 0xA8, 0xA8, 0x50, 0x00
	.db 0x88, 0x88, 0x50, 0x20, 0x50, 0x88, 0x88, 0x00, 0x88, 0x88, 0x50, 0x20, 0x20, 0x20, 0x20, 0x00
	.db 0xF8, 0x08, 0x10, 0x20, 0x40, 0x80, 0xF8, 0x00, 0x38, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x00
	.db 0x88, 0x50, 0x20, 0x70, 0x20, 0x70, 0x20, 0x00, 0x70, 0x10, 0x10, 0x10, 0x10, 0x10, 0x70, 0x00
	.db 0x20, 0x50, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xF0, 0x50, 0x50, 0x90, 0x00
	.db 0x40, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x10, 0x70, 0x90, 0x68, 0x00
	.db 0x80, 0x80, 0xB0, 0xC8, 0x88, 0xC8, 0xB0, 0x00, 0x00, 0x00, 0x70, 0x88, 0x80, 0x88, 0x70, 0x00
	.db 0x08, 0x08, 0x68, 0x98, 0x88, 0x98, 0x68, 0x00, 0x00, 0x00, 0x70, 0x88, 0xF8, 0x80, 0x70, 0x00
	.db 0x18, 0x20, 0x20, 0xF8, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x68, 0x98, 0x88, 0x78, 0x08, 0x70
	.db 0x80, 0x80, 0xB0, 0xC8, 0x88, 0x88, 0x88, 0x00, 0x20, 0x00, 0x60, 0x20, 0x20, 0x20, 0x70, 0x00
	.db 0x10, 0x00, 0x30, 0x10, 0x10, 0x10, 0x90, 0x60, 0x80, 0x80, 0x88, 0x90, 0xA0, 0xD0, 0x88, 0x00
	.db 0x60, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x00, 0x00, 0x00, 0xD0, 0xA8, 0xA8, 0xA8, 0xA8, 0x00
	.db 0x00, 0x00, 0xB0, 0xC8, 0x88, 0x88, 0x88, 0x00, 0x00, 0x00, 0x70, 0x88, 0x88, 0x88, 0x70, 0x00
	.db 0x00, 0x00, 0x70, 0x48, 0x48, 0x70, 0x40, 0x40, 0x00, 0x00, 0x38, 0x48, 0x48, 0x38, 0x08, 0x08
	.db 0x00, 0x00, 0xB0, 0xC8, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x78, 0x80, 0x70, 0x08, 0xF0, 0x00
	.db 0x20, 0x20, 0xF8, 0x20, 0x20, 0x20, 0x18, 0x00, 0x00, 0x00, 0x88, 0x88, 0x88, 0x98, 0x68, 0x00
	.db 0x00, 0x00, 0x88, 0x88, 0x88, 0x50, 0x20, 0x00, 0x00, 0x00, 0x88, 0xA8, 0xA8, 0xA8, 0x50, 0x00
	.db 0x00, 0x00, 0x88, 0x50, 0x20, 0x50, 0x88, 0x00, 0x00, 0x00, 0x88, 0x88, 0x98, 0x68, 0x08, 0x70
	.db 0x00, 0x00, 0xF8, 0x10, 0x20, 0x40, 0xF8, 0x00, 0x18, 0x20, 0x20, 0x40, 0x20, 0x20, 0x18, 0x00
	.db 0x20, 0x20, 0x20, 0x00, 0x20, 0x20, 0x20, 0x00, 0xC0, 0x20, 0x20, 0x10, 0x20, 0x20, 0xC0, 0x00
	.db 0x00, 0x00, 0x40, 0xA8, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00
	.db 0x20, 0x20, 0x20, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x20, 0x20, 0x20, 0x20
	.db 0x20, 0x20, 0x20, 0xE0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3C, 0x20, 0x20, 0x20, 0x20
	.db 0x00, 0x00, 0x00, 0x3C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3C, 0x00, 0x00, 0x00, 0x00
	.db 0x00, 0x00, 0x00, 0xE0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xE0, 0x00, 0x00, 0x00, 0x00
	.db 0x00, 0x00, 0x00, 0x0C, 0x10, 0x20, 0x20, 0x20, 0x20, 0x20, 0x10, 0x0C, 0x00, 0x00, 0x00, 0x00
	.db 0x00, 0x00, 0x00, 0x80, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00
	.db 0x20, 0x70, 0xA8, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x20, 0x40, 0xF8, 0x40, 0x20, 0x00, 0x00
	.db 0xA8, 0x54, 0xA8, 0x54, 0xA8, 0x54, 0xA8, 0x54, 0x84, 0x88, 0x50, 0x30, 0x30, 0x28, 0x44, 0x84
	.db 0x20, 0x20, 0x20, 0xFC, 0x20, 0x20, 0x20, 0x20, 0x04, 0x08, 0x10, 0x10, 0x20, 0x20, 0x40, 0x80
	.db 0x80, 0x40, 0x20, 0x20, 0x10, 0x10, 0x08, 0x04, 0x04, 0x0C, 0x1C, 0x1C, 0x3C, 0x3C, 0x7C, 0xFC
	.db 0x80, 0xC0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF8, 0xFC, 0xFC, 0x7C, 0x3C, 0x3C, 0x1C, 0x1C, 0x0C, 0x04
	.db 0xFC, 0xF8, 0xF0, 0xF0, 0xE0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC
	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFC, 0xFC, 0xFC
	.db 0xFC, 0xFC, 0xFC, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.db 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80
	.db 0x20, 0x50, 0x00, 0x70, 0x88, 0xF8, 0x88, 0x00, 0x50, 0x20, 0x00, 0x70, 0x88, 0xF8, 0x88, 0x00
	.db 0x18, 0x20, 0x00, 0x70, 0x88, 0xF8, 0x88, 0x00, 0xC0, 0x20, 0x00, 0x70, 0x88, 0xF8, 0x88, 0x00
	.db 0x00, 0x50, 0x00, 0x70, 0x88, 0xF8, 0x88, 0x00, 0x20, 0x50, 0x20, 0x70, 0x88, 0xF8, 0x88, 0x00
	.db 0x48, 0xB0, 0x00, 0x70, 0x88, 0xF8, 0x88, 0x00, 0x00, 0x70, 0x00, 0x70, 0x88, 0xF8, 0x88, 0x00
	.db 0x10, 0x28, 0xF0, 0x80, 0xF0, 0x80, 0xF0, 0x00, 0x28, 0x10, 0xE0, 0x80, 0xF0, 0x80, 0xF0, 0x00
	.db 0x50, 0x00, 0xF0, 0x80, 0xF0, 0x80, 0xF0, 0x00, 0x70, 0x00, 0xF0, 0x80, 0xF0, 0x80, 0xF0, 0x00
	.db 0x08, 0x10, 0xF0, 0x80, 0xF0, 0x80, 0xF0, 0x00, 0x80, 0x40, 0xF0, 0x80, 0xF0, 0x80, 0xF0, 0x00
	.db 0x48, 0xB0, 0x00, 0xC8, 0xA8, 0x98, 0x88, 0x00, 0x30, 0x48, 0x00, 0xC8, 0xA8, 0x98, 0x88, 0x00
	.db 0x28, 0x10, 0x00, 0xE0, 0x40, 0x40, 0xE0, 0x00, 0x80, 0x40, 0x00, 0x38, 0x10, 0x10, 0x38, 0x00
	.db 0x08, 0x10, 0x00, 0xE0, 0x40, 0x40, 0xE0, 0x00, 0x00, 0x50, 0x00, 0x70, 0x20, 0x20, 0x70, 0x00
	.db 0x10, 0x28, 0x00, 0xE0, 0x40, 0x40, 0xE0, 0x00, 0x00, 0x70, 0x00, 0x70, 0x20, 0x20, 0x70, 0x00
	.db 0x20, 0x50, 0x00, 0x70, 0x88, 0x88, 0x70, 0x00, 0x90, 0x60, 0x00, 0x70, 0x88, 0x88, 0x70, 0x00
	.db 0x70, 0x88, 0x88, 0x88, 0x70, 0x20, 0x40, 0x00, 0x08, 0x10, 0x00, 0x70, 0x88, 0x88, 0x70, 0x00
	.db 0x80, 0x40, 0x00, 0x70, 0x88, 0x88, 0x70, 0x00, 0x00, 0x50, 0x00, 0x70, 0x88, 0x88, 0x70, 0x00
	.db 0x48, 0xB0, 0x00, 0x70, 0x88, 0x88, 0x70, 0x00, 0x10, 0x28, 0x00, 0x88, 0x88, 0x88, 0x70, 0x00
	.db 0x50, 0x20, 0x00, 0x88, 0x88, 0x88, 0x70, 0x00, 0x10, 0x20, 0x00, 0x88, 0x88, 0x88, 0x70, 0x00
	.db 0x40, 0x20, 0x00, 0x88, 0x88, 0x88, 0x70, 0x00, 0x00, 0x50, 0x00, 0x88, 0x88, 0x88, 0x70, 0x00
	.db 0x00, 0x70, 0x00, 0x88, 0x88, 0x88, 0x70, 0x00, 0x00, 0x68, 0xB0, 0x90, 0xB0, 0xE8, 0x00, 0x00
	.db 0x00, 0x70, 0x48, 0x70, 0x48, 0x48, 0xB0, 0x00, 0x60, 0x90, 0x90, 0xF0, 0x90, 0x90, 0x60, 0x00
	.db 0x00, 0x08, 0x18, 0x28, 0x48, 0xC8, 0x08, 0x00, 0x00, 0x48, 0x48, 0x48, 0xB0, 0x80, 0x00, 0x00
	.db 0x00, 0xF0, 0x90, 0x40, 0x40, 0x90, 0xF0, 0x00, 0x10, 0x70, 0x98, 0xA8, 0xC8, 0x70, 0x40, 0x00
	.db 0x00, 0x00, 0x70, 0x88, 0x88, 0x50, 0xD8, 0x00, 0x70, 0x88, 0x80, 0x88, 0x70, 0x20, 0x40, 0x00
	.db 0x20, 0x00, 0x20, 0x60, 0x88, 0x88, 0x70, 0x00, 0x20, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00
	.db 0x04, 0x08, 0x08, 0x1C, 0x10, 0x20, 0x20, 0x00, 0x10, 0x20, 0x70, 0x20, 0x60, 0xA0, 0x78, 0x00
	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.db 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0
	.db 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C
	.db 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC
	.db 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x00, 0x00, 0xFC, 0xFC, 0xFC, 0x00, 0x00, 0x00
	.db 0x20, 0x50, 0x20, 0x50, 0x20, 0x50, 0x20, 0x50, 0x00, 0x00, 0xA8, 0x54, 0xA8, 0x00, 0x00, 0x00
	.db 0x1C, 0x1C, 0x1C, 0x1C, 0xE0, 0xE0, 0xE0, 0xE0, 0x00, 0x70, 0x88, 0x88, 0x88, 0x70, 0x00, 0x00
	.db 0x00, 0x70, 0xF8, 0xF8, 0xF8, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x70, 0xF8, 0xF8, 0xF8, 0x20, 0x70, 0x00
	.db 0x50, 0xF8, 0xF8, 0xF8, 0xF8, 0x70, 0x20, 0x00, 0x20, 0x20, 0x70, 0xF8, 0x70, 0x20, 0x20, 0x00
	.db 0x70, 0x70, 0xA8, 0xF8, 0xA8, 0x20, 0x70, 0x00, 0x78, 0xFC, 0xB4, 0xB4, 0xFC, 0xCC, 0x78, 0x00
	.db 0x00, 0x20, 0x70, 0xA8, 0xF8, 0x50, 0x00, 0x00, 0x88, 0xF8, 0xA8, 0x20, 0xA8, 0xF8, 0x88, 0x00
	.db 0x00, 0xDC, 0x48, 0x78, 0x48, 0xDC, 0x00, 0x00, 0x70, 0x70, 0x20, 0xF8, 0x20, 0x20, 0x50, 0x00
	.db 0x00, 0x20, 0x00, 0xF8, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
font_data_end:
.ascii "FONT_END"
